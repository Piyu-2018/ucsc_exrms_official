"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Table = require("material-ui/Table");

var _lightBaseTheme = _interopRequireDefault(require("material-ui/styles/baseThemes/lightBaseTheme"));

var _getMuiTheme = _interopRequireDefault(require("material-ui/styles/getMuiTheme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DayTimeTable =
/*#__PURE__*/
function (_Component) {
  _inherits(DayTimeTable, _Component);

  _createClass(DayTimeTable, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        muiTheme: (0, _getMuiTheme.default)(_lightBaseTheme.default)
      };
    }
  }]);

  function DayTimeTable(props) {
    _classCallCheck(this, DayTimeTable);

    return _possibleConstructorReturn(this, (DayTimeTable.__proto__ || Object.getPrototypeOf(DayTimeTable)).call(this, props));
  }

  _createClass(DayTimeTable, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          calcCellHeight = _props.calcCellHeight,
          caption = _props.caption,
          cellKey = _props.cellKey,
          data = _props.data,
          hideHeaders = _props.hideHeaders,
          hideTimes = _props.hideTimes,
          isActive = _props.isActive,
          rowNum = _props.rowNum,
          showCell = _props.showCell,
          showHeader = _props.showHeader,
          showTime = _props.showTime,
          tableProps = _props.tableProps,
          timeText = _props.timeText,
          toolTip = _props.toolTip,
          valueKey = _props.valueKey;
      var headers = data.map(function (day, ii) {
        return _react.default.createElement(_Table.TableHeaderColumn, {
          key: ii
        }, showHeader(day));
      });
      var colNum = headers.length;
      var grid = [];
      var found = new Map();

      var _loop = function _loop(ii) {
        grid[ii] = [];

        var _loop2 = function _loop2(jj) {
          grid[ii][jj] = 0;
          data[jj][valueKey].map(function (cell) {
            if (isActive(cell, ii)) {
              grid[ii][jj] = {
                height: calcCellHeight(cell),
                info: _extends({}, cell)
              };

              if (found.get(cellKey(cell))) {
                grid[ii][jj].skip = true;
              } else {
                grid[ii][jj].first = true;
                found.set(cellKey(cell), true);
              }
            }
          });
        };

        for (var jj = 0; jj < colNum; jj++) {
          _loop2(jj);
        }
      };

      for (var ii = 0; ii < rowNum; ii++) {
        _loop(ii);
      }

      return _react.default.createElement(_Table.Table, _extends({
        muiTheme: this.context.muiTheme,
        selectable: false
      }, tableProps), !hideHeaders && _react.default.createElement(_Table.TableHeader, {
        displaySelectAll: false,
        adjustForCheckbox: false
      }, !!caption && _react.default.createElement(_Table.TableRow, null, _react.default.createElement(_Table.TableHeaderColumn, {
        colSpan: colNum + !hideTimes,
        tooltip: toolTip,
        style: {
          textAlign: "center"
        }
      }, caption)), _react.default.createElement(_Table.TableRow, null, !hideTimes && _react.default.createElement(_Table.TableHeaderColumn, null, timeText), headers)), _react.default.createElement(_Table.TableBody, {
        displayRowCheckbox: false
      }, grid.map(function (row, ii) {
        var cellStyle = {
          borderRight: "1px solid rgb(224, 224, 224)",
          borderLeft: "1px solid rgb(224, 224, 224)"
        };
        return _react.default.createElement(_Table.TableRow, {
          key: ii
        }, !hideTimes && _react.default.createElement(_Table.TableRowColumn, {
          style: cellStyle
        }, showTime(ii)), row.map(function (xx, jj) {
          if (!xx.info) {
            return _react.default.createElement(_Table.TableRowColumn, {
              key: "".concat(ii, "-").concat(jj),
              style: cellStyle
            });
          } else if (xx.first) {
            if (!xx.info.props) {
              xx.info.props = {
                style: ""
              };
            }

            return _react.default.createElement(_Table.TableRowColumn, _extends({
              key: cellKey(xx.info),
              rowSpan: xx.height
            }, xx.info.props, {
              style: Object.assign(xx.info.props.style, cellStyle)
            }), showCell(xx.info));
          } else if (xx.skip) {
            return;
          }
        }));
      })));
    }
  }]);

  return DayTimeTable;
}(_react.Component);

DayTimeTable.propTypes = {
  calcCellHeight: _propTypes.default.func.isRequired,
  caption: _propTypes.default.string,
  cellKey: _propTypes.default.func.isRequired,
  data: _propTypes.default.object.isRequired,
  hideHeaders: _propTypes.default.bool,
  hideTimes: _propTypes.default.bool,
  isActive: _propTypes.default.func.isRequired,
  rowNum: _propTypes.default.number.isRequired,
  showCell: _propTypes.default.func.isRequired,
  showHeader: _propTypes.default.func.isRequired,
  showTime: _propTypes.default.func.isRequired,
  tableProps: _propTypes.default.object,
  timeText: _propTypes.default.string,
  toolTip: _propTypes.default.string,
  valueKey: _propTypes.default.string.isRequired
};
DayTimeTable.defaultProps = {
  timeText: "Times",
  toolTip: ""
};
DayTimeTable.childContextTypes = {
  muiTheme: _propTypes.default.object.isRequired
};
var _default = DayTimeTable;
exports.default = _default;