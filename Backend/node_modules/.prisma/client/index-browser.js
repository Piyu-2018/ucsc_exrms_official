
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.2.1
 * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
 */
Prisma.prismaVersion = {
  client: "4.2.1",
  engine: "2920a97877e12e055c1333079b8d19cee7f33826"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Academic_yearScalarFieldEnum = makeEnum({
  ac_year_ID: 'ac_year_ID',
  no_of_student: 'no_of_student',
  year: 'year'
});

exports.Prisma.AdmissionScalarFieldEnum = makeEnum({
  admission_id: 'admission_id',
  exam_hall: 'exam_hall',
  course_name: 'course_name',
  course_code: 'course_code',
  exan_date: 'exan_date',
  exam_time: 'exam_time',
  attendence_verify: 'attendence_verify'
});

exports.Prisma.AnnouncementScalarFieldEnum = makeEnum({
  annou_id: 'annou_id',
  content: 'content',
  admin_id: 'admin_id'
});

exports.Prisma.Assign_marksScalarFieldEnum = makeEnum({
  assigment_id: 'assigment_id',
  sub_marks: 'sub_marks',
  total_marks: 'total_marks',
  assign_precentage: 'assign_precentage',
  mark_id: 'mark_id'
});

exports.Prisma.ConfirmScalarFieldEnum = makeEnum({
  confirm_id: 'confirm_id',
  letter_id: 'letter_id'
});

exports.Prisma.CourseScalarFieldEnum = makeEnum({
  course_id: 'course_id',
  year: 'year',
  semester: 'semester',
  course_name: 'course_name',
  course_code: 'course_code',
  lecture_name: 'lecture_name',
  ac_year_ID: 'ac_year_ID'
});

exports.Prisma.DirectorScalarFieldEnum = makeEnum({
  director_id: 'director_id',
  user_id: 'user_id'
});

exports.Prisma.ExamScalarFieldEnum = makeEnum({
  exam_sem_id: 'exam_sem_id',
  semester: 'semester',
  year: 'year'
});

exports.Prisma.Exam_markScalarFieldEnum = makeEnum({
  mark_id: 'mark_id',
  course_code: 'course_code',
  course_name: 'course_name',
  grade: 'grade',
  total_mark: 'total_mark',
  director_status: 'director_status',
  head_of_exam_status: 'head_of_exam_status',
  exam_sem_id: 'exam_sem_id',
  director_id: 'director_id',
  head_of_exam_id: 'head_of_exam_id',
  index_no: 'index_no'
});

exports.Prisma.Exam_timetableScalarFieldEnum = makeEnum({
  timetable_id: 'timetable_id',
  exam_date: 'exam_date',
  exam_time: 'exam_time',
  course_code: 'course_code',
  course_name: 'course_name',
  exam_sem_id: 'exam_sem_id'
});

exports.Prisma.Head_of_exam_boardScalarFieldEnum = makeEnum({
  head_of_exam_ID: 'head_of_exam_ID',
  user_id: 'user_id',
  staff_id: 'staff_id'
});

exports.Prisma.Lecture_questionScalarFieldEnum = makeEnum({
  exam_paper_id: 'exam_paper_id',
  lecture_id: 'lecture_id'
});

exports.Prisma.LecturerScalarFieldEnum = makeEnum({
  lecturer_id: 'lecturer_id',
  degree: 'degree',
  user_id: 'user_id'
});

exports.Prisma.LetterScalarFieldEnum = makeEnum({
  letter_id: 'letter_id',
  email: 'email',
  another_email: 'another_email',
  final_quali: 'final_quali',
  id_no: 'id_no',
  duration: 'duration',
  degree_status: 'degree_status',
  study_year: 'study_year',
  index_no: 'index_no',
  reg_no: 'reg_no',
  degree_prog: 'degree_prog',
  address: 'address',
  contact_no: 'contact_no',
  another_cont_no: 'another_cont_no',
  payment_voucher: 'payment_voucher'
});

exports.Prisma.MaScalarFieldEnum = makeEnum({
  MA_id: 'MA_id',
  user_id: 'user_id',
  staff_id: 'staff_id',
  office_id: 'office_id',
  letter_id: 'letter_id'
});

exports.Prisma.Mis_reportScalarFieldEnum = makeEnum({
  mis_id: 'mis_id',
  report_id: 'report_id'
});

exports.Prisma.Paper_marksScalarFieldEnum = makeEnum({
  paper_id: 'paper_id',
  sub_marks: 'sub_marks',
  total_marks: 'total_marks',
  paper_precentage: 'paper_precentage',
  mark_id: 'mark_id'
});

exports.Prisma.Paper_questionScalarFieldEnum = makeEnum({
  exam_paper_id: 'exam_paper_id',
  course_code: 'course_code',
  course_name: 'course_name',
  question_no: 'question_no',
  exam_sem_id: 'exam_sem_id'
});

exports.Prisma.PaymentScalarFieldEnum = makeEnum({
  payment_id: 'payment_id',
  payment_date: 'payment_date',
  amount: 'amount',
  status: 'status',
  index_no: 'index_no',
  ac_year_ID: 'ac_year_ID'
});

exports.Prisma.Repeat_courseScalarFieldEnum = makeEnum({
  rc_id: 'rc_id',
  course_code: 'course_code',
  course_name: 'course_name',
  year: 'year',
  semester: 'semester'
});

exports.Prisma.ReportScalarFieldEnum = makeEnum({
  report_id: 'report_id',
  course_name: 'course_name',
  course_code: 'course_code',
  year: 'year',
  semester: 'semester',
  exam_sem_id: 'exam_sem_id'
});

exports.Prisma.SarScalarFieldEnum = makeEnum({
  SAR_id: 'SAR_id',
  user_id: 'user_id',
  staff_id: 'staff_id',
  office_id: 'office_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StaffScalarFieldEnum = makeEnum({
  staff_id: 'staff_id',
  user_id: 'user_id'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  index_no: 'index_no',
  user_id: 'user_id',
  nic: 'nic',
  gender: 'gender',
  initials: 'initials',
  title: 'title',
  general_eng: 'general_eng',
  district_no: 'district_no',
  intake: 'intake',
  reg_no: 'reg_no',
  telep_1: 'telep_1',
  telep_2: 'telep_2',
  address_no: 'address_no',
  address_city: 'address_city',
  address_street: 'address_street',
  address_4: 'address_4',
  student_temp_no: 'student_temp_no',
  district_name: 'district_name',
  name_initial: 'name_initial',
  full_name: 'full_name',
  syllabus: 'syllabus',
  AL_index_no: 'AL_index_no',
  rank: 'rank',
  GPA: 'GPA',
  ac_year_ID: 'ac_year_ID'
});

exports.Prisma.Subject_reportScalarFieldEnum = makeEnum({
  subject_id: 'subject_id',
  no_of_student: 'no_of_student',
  report_id: 'report_id'
});

exports.Prisma.System_pagesScalarFieldEnum = makeEnum({
  page_id: 'page_id',
  content: 'content',
  admin_id: 'admin_id'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TranscriptScalarFieldEnum = makeEnum({
  transcript_id: 'transcript_id',
  letter_id: 'letter_id'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  user_name: 'user_name',
  password: 'password',
  email: 'email',
  user_type: 'user_type',
  f_name: 'f_name',
  l_name: 'l_name',
  profile_pic: 'profile_pic'
});


exports.Prisma.ModelName = makeEnum({
  academic_year: 'academic_year',
  admission: 'admission',
  announcement: 'announcement',
  assign_marks: 'assign_marks',
  confirm: 'confirm',
  course: 'course',
  director: 'director',
  exam: 'exam',
  exam_mark: 'exam_mark',
  exam_timetable: 'exam_timetable',
  head_of_exam_board: 'head_of_exam_board',
  lecture_question: 'lecture_question',
  lecturer: 'lecturer',
  letter: 'letter',
  ma: 'ma',
  mis_report: 'mis_report',
  paper_marks: 'paper_marks',
  paper_question: 'paper_question',
  payment: 'payment',
  repeat_course: 'repeat_course',
  report: 'report',
  sar: 'sar',
  staff: 'staff',
  student: 'student',
  subject_report: 'subject_report',
  system_pages: 'system_pages',
  transcript: 'transcript',
  user: 'user'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
